import React, { useState, useEffect } from 'react';
import { Info, Search, Shield, AlertTriangle, CheckCircle, ChevronRight, Filter, Download, RefreshCw, Calendar, Clock, BarChart2, TrendingUp, Lock, Zap } from 'lucide-react';

const VulnerabilityScanner = () => {
  const [scanProgress, setScanProgress] = useState(0);
  const [isScanning, setIsScanning] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState('all');
  const [scanHistory, setScanHistory] = useState([
    { date: '4/5/2025', duration: '3m 25s', vulnerabilities: 4 },
    { date: '4/2/2025', duration: '5m 10s', vulnerabilities: 6 },
    { date: '3/28/2025', duration: '4m 45s', vulnerabilities: 8 }
  ]);
  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
  const [expandedVulnerability, setExpandedVulnerability] = useState(null);
  
  // Mock vulnerability data
  const allVulnerabilities = [
    {
      id: 1,
      name: 'CVE-2023-42069',
      severity: 'high',
      status: 'open',
      affectedComponent: 'OpenSSL',
      description: 'Buffer overflow vulnerability in OpenSSL library',
      recommendation: 'Update to latest version 3.2.1',
      detectedDate: '2023-10-15',
      cvssScore: 8.5,
      affectedSystems: ['API Server', 'Database Gateway'],
      remediationSteps: [
        'Download the latest OpenSSL version',
        'Back up configuration files',
        'Replace binaries and libraries',
        'Restart affected services'
      ]
    },
    {
      id: 2,
      name: 'CVE-2023-98765',
      severity: 'medium',
      status: 'open',
      affectedComponent: 'Apache Server',
      description: 'Directory traversal vulnerability in Apache HTTP Server',
      recommendation: 'Apply security patch 2.4.56',
      detectedDate: '2023-10-10',
      cvssScore: 6.2,
      affectedSystems: ['Web Server'],
      remediationSteps: [
        'Install Apache security patch',
        'Update configuration with recommended hardening',
        'Restart Apache service'
      ]
    },
    {
      id: 3,
      name: 'CVE-2022-54321',
      severity: 'low',
      status: 'fixed',
      affectedComponent: 'Node.js',
      description: 'Cross-site scripting vulnerability in Node.js package',
      recommendation: 'Update Node.js to version 16.3.0 or higher',
      detectedDate: '2023-09-28',
      cvssScore: 3.7,
      affectedSystems: ['Frontend Server'],
      remediationSteps: [
        'Update Node.js version',
        'Audit npm packages',
        'Run security tests'
      ]
    },
    {
      id: 4,
      name: 'CVE-2023-11235',
      severity: 'high',
      status: 'open',
      affectedComponent: 'PostgreSQL',
      description: 'SQL injection vulnerability in PostgreSQL connector',
      recommendation: 'Update database driver to latest version',
      detectedDate: '2023-10-14',
      cvssScore: 7.8,
      affectedSystems: ['Database Server', 'Authentication Service'],
      remediationSteps: [
        'Update PostgreSQL connector',
        'Apply prepared statement pattern to queries',
        'Run security validation tests'
      ]
    },
    {
      id: 5,
      name: 'CVE-2024-32109',
      severity: 'high',
      status: 'open',
      affectedComponent: 'Log4j',
      description: 'Remote code execution vulnerability in Log4j library',
      recommendation: 'Upgrade to Log4j 2.17.1',
      detectedDate: '2024-02-28',
      cvssScore: 9.1,
      affectedSystems: ['All Java Services'],
      remediationSteps: [
        'Identify all instances of Log4j',
        'Update Log4j dependencies',
        'Validate configuration files',
        'Deploy updates to all environments'
      ]
    },
  ];

  const securityScore = 78;
  const lastScanDate = "April 6, 2025";
  const lastScanTime = "10:45 AM";

  const filteredVulnerabilities = selectedFilter === 'all' 
    ? allVulnerabilities 
    : allVulnerabilities.filter(v => 
        selectedFilter === 'fixed' ? v.status === 'fixed' : 
        selectedFilter === 'open' ? v.status === 'open' : 
        v.severity === selectedFilter
      );

  const handleStartScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          // Add the new scan to history
          const newScan = {
            date: new Date().toLocaleDateString('en-US', {month: 'numeric', day: 'numeric', year: 'numeric'}).replace(/\//g, '/'),
            duration: '2m 15s',
            vulnerabilities: Math.floor(Math.random() * 3) + 4
          };
          setScanHistory([newScan, ...scanHistory.slice(0, 4)]);
          return 100;
        }
        return prev + 2;
      });
    }, 200);
  };

  const handleExpandVulnerability = (id) => {
    if (expandedVulnerability === id) {
      setExpandedVulnerability(null);
    } else {
      setExpandedVulnerability(id);
    }
  };

  const getSeverityBadge = (severity) => {
    const colors = {
      high: 'bg-red-100 text-red-800',
      medium: 'bg-amber-100 text-amber-800',
      low: 'bg-blue-100 text-blue-800',
    };
    
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${colors[severity]}`}>
        {severity.toUpperCase()}
      </span>
    );
  };

  const getStatusBadge = (status) => {
    return status === 'fixed' ? (
      <span className="flex items-center text-green-600 text-xs">
        <CheckCircle className="h-3 w-3 mr-1" />
        Fixed
      </span>
    ) : (
      <span className="flex items-center text-amber-600 text-xs">
        <AlertTriangle className="h-3 w-3 mr-1" />
        Open
      </span>
    );
  };

  // Calculate vulnerability stats
  const highVulns = allVulnerabilities.filter(v => v.severity === 'high').length;
  const mediumVulns = allVulnerabilities.filter(v => v.severity === 'medium').length;
  const lowVulns = allVulnerabilities.filter(v => v.severity === 'low').length;
  const openVulns = allVulnerabilities.filter(v => v.status === 'open').length;
  
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
      <div className="bg-gradient-to-r from-indigo-50 to-purple-50 px-4 py-3 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Search className="w-6 h-6 text-indigo-600 mr-2" />
            <h2 className="text-xl font-semibold text-gray-800">Vulnerability Scanner</h2>
          </div>
          <div className="flex items-center space-x-3">
            <div className="hidden md:flex items-center space-x-1 bg-indigo-50 px-2 py-1 rounded-md">
              <Calendar className="h-4 w-4 text-indigo-600" />
              <span className="text-xs text-gray-600">Last scan: {lastScanDate}, {lastScanTime}</span>
            </div>
            <button 
              onClick={handleStartScan}
              disabled={isScanning}
              className={`px-4 py-2 rounded-md text-sm font-medium ${
                isScanning ? 'bg-gray-300 cursor-not-allowed text-gray-600' : 'bg-indigo-600 hover:bg-indigo-700 text-white'
              }`}
            >
              {isScanning ? 
                <div className="flex items-center">
                  <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                  Scanning...
                </div> : 
                'Start Scan'
              }
            </button>
          </div>
        </div>
      </div>
      
      {isScanning && (
        <div className="p-4 pb-0">
          <div className="flex justify-between mb-1 text-sm text-gray-600">
            <span>Scanning system for vulnerabilities...</span>
            <span>{scanProgress}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-indigo-600 h-2 rounded-full transition-all duration-300" 
              style={{ width: `${scanProgress}%` }}
            ></div>
          </div>
          <div className="text-xs text-gray-500 mt-1 mb-3">
            Estimated time remaining: {Math.ceil((100 - scanProgress) / 20)} minutes
          </div>
        </div>
      )}
      
      <div className="p-4">
        {/* Security Score and Summary Dashboard */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-5">
          <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg p-4 flex items-center shadow-sm">
            <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center shadow-sm">
              <Shield className="h-6 w-6 text-indigo-600" />
            </div>
            <div className="ml-4">
              <div className="text-sm text-gray-500">Security Score</div>
              <div className="text-2xl font-bold text-indigo-700">{securityScore}/100</div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg p-4 flex items-center shadow-sm border border-gray-100">
            <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
              <AlertTriangle className="h-5 w-5 text-red-600" />
            </div>
            <div className="ml-3">
              <div className="text-xs text-gray-500">High Risk</div>
              <div className="text-xl font-bold text-gray-800">{highVulns}</div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg p-4 flex items-center shadow-sm border border-gray-100">
            <div className="w-10 h-10 bg-amber-100 rounded-full flex items-center justify-center">
              <Zap className="h-5 w-5 text-amber-600" />
            </div>
            <div className="ml-3">
              <div className="text-xs text-gray-500">Medium Risk</div>
              <div className="text-xl font-bold text-gray-800">{mediumVulns}</div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg p-4 flex items-center shadow-sm border border-gray-100">
            <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
              <Info className="h-5 w-5 text-blue-600" />
            </div>
            <div className="ml-3">
              <div className="text-xs text-gray-500">Low Risk</div>
              <div className="text-xl font-bold text-gray-800">{lowVulns}</div>
            </div>
          </div>
        </div>
        
        <div className="mb-4 flex flex-col md:flex-row justify-between items-start md:items-center">
          <div className="flex items-center space-x-2 mb-3 md:mb-0">
            <Filter className="h-4 w-4 text-gray-500" />
            <select 
              className="text-sm border-gray-300 rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              value={selectedFilter}
              onChange={(e) => setSelectedFilter(e.target.value)}
            >
              <option value="all">All Vulnerabilities</option>
              <option value="high">High Severity</option>
              <option value="medium">Medium Severity</option>
              <option value="low">Low Severity</option>
              <option value="open">Open</option>
              <option value="fixed">Fixed</option>
            </select>
          </div>
          <div className="flex space-x-3">
            <button 
              onClick={() => setIsHistoryOpen(!isHistoryOpen)}
              className="flex items-center text-sm text-indigo-600 hover:text-indigo-800"
            >
              <Clock className="h-4 w-4 mr-1" />
              {isHistoryOpen ? 'Hide History' : 'View History'}
            </button>
            <button className="flex items-center text-sm text-gray-600 hover:text-gray-800">
              <Download className="h-4 w-4 mr-1" />
              Export Report
            </button>
          </div>
        </div>
        
        {/* Scan History (Collapsible) */}
        {isHistoryOpen && (
          <div className="bg-gray-50 rounded-lg p-3 mb-4 border border-gray-200 animate-fadeIn">
            <h3 className="text-sm font-medium text-gray-700 mb-2">Scan History</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-100">
                  <tr>
                    <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500">Date</th>
                    <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500">Duration</th>
                    <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500">Vulnerabilities</th>
                    <th scope="col" className="px-3 py-2 text-right text-xs font-medium text-gray-500">Status</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {scanHistory.map((scan, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-3 py-2 whitespace-nowrap text-xs text-gray-700">{scan.date}</td>
                      <td className="px-3 py-2 whitespace-nowrap text-xs text-gray-700">{scan.duration}</td>
                      <td className="px-3 py-2 whitespace-nowrap text-xs text-gray-700">{scan.vulnerabilities}</td>
                      <td className="px-3 py-2 whitespace-nowrap text-right">
                        <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          Complete
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
        
        <div className="bg-white rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vulnerability</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Severity</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Component</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Detected</th>
                <th scope="col" className="px-3 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredVulnerabilities.map((vuln) => (
                <React.Fragment key={vuln.id}>
                  <tr className={`hover:bg-gray-50 ${expandedVulnerability === vuln.id ? 'bg-indigo-50' : ''}`}>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <div className="flex flex-col">
                        <span className="text-sm font-medium text-gray-900">{vuln.name}</span>
                        <span className="text-xs text-gray-500">{vuln.description}</span>
                      </div>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      {getSeverityBadge(vuln.severity)}
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      {getStatusBadge(vuln.status)}
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <span className="text-sm text-gray-600">{vuln.affectedComponent}</span>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <span className="text-sm text-gray-600">{vuln.detectedDate}</span>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap text-right">
                      <button 
                        onClick={() => handleExpandVulnerability(vuln.id)}
                        className="text-indigo-600 hover:text-indigo-900 text-sm font-medium flex items-center ml-auto"
                      >
                        {expandedVulnerability === vuln.id ? 'Hide' : 'Details'}
                        <ChevronRight className={`h-4 w-4 ml-1 transition-transform ${expandedVulnerability === vuln.id ? 'rotate-90' : ''}`} />
                      </button>
                    </td>
                  </tr>
                  {expandedVulnerability === vuln.id && (
                    <tr>
                      <td colSpan="6" className="px-3 py-3 bg-indigo-50 border-t border-indigo-100">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="p-3 bg-white rounded shadow-sm">
                            <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                              <TrendingUp className="h-4 w-4 text-indigo-500 mr-1" />
                              Risk Assessment
                            </h4>
                            <div className="mb-2">
                              <span className="text-xs text-gray-500">CVSS Score:</span>
                              <div className="w-full bg-gray-200 rounded-full h-1.5 my-1">
                                <div 
                                  className={`h-1.5 rounded-full ${
                                    vuln.cvssScore > 7 ? 'bg-red-500' : 
                                    vuln.cvssScore > 4 ? 'bg-amber-500' : 'bg-blue-500'
                                  }`}
                                  style={{ width: `${(vuln.cvssScore / 10) * 100}%` }}
                                ></div>
                              </div>
                              <span className="text-xs font-medium">
                                {vuln.cvssScore}/10
                              </span>
                            </div>
                            <div>
                              <span className="text-xs text-gray-500">Affected Systems:</span>
                              <div className="flex flex-wrap gap-1 mt-1">
                                {vuln.affectedSystems.map((system, i) => (
                                  <span key={i} className="text-xs bg-gray-100 px-2 py-0.5 rounded">
                                    {system}
                                  </span>
                                ))}
                              </div>
                            </div>
                          </div>
                          <div className="p-3 bg-white rounded shadow-sm">
                            <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                              <Lock className="h-4 w-4 text-indigo-500 mr-1" />
                              Remediation
                            </h4>
                            <p className="text-xs text-gray-600 mb-2">
                              <span className="font-medium">Recommendation:</span> {vuln.recommendation}
                            </p>
                            <ul className="text-xs text-gray-600 list-disc pl-4 space-y-1">
                              {vuln.remediationSteps.map((step, i) => (
                                <li key={i}>{step}</li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              ))}
            </tbody>
          </table>
        </div>
        
        <div className="mt-4 flex flex-col md:flex-row justify-between items-start md:items-center">
          <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600 mb-3 md:mb-0">
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-red-500 rounded-full mr-1"></span>
              High: {highVulns}
            </span>
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-amber-500 rounded-full mr-1"></span>
              Medium: {mediumVulns}
            </span>
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-blue-500 rounded-full mr-1"></span>
              Low: {lowVulns}
            </span>
          </div>
          {openVulns > 0 && (
            <div className="flex items-center">
              <span className="text-sm text-red-600 font-medium">
                {openVulns} {openVulns === 1 ? 'issue' : 'issues'} require attention
              </span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityScanner;