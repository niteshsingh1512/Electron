import React, { useState } from 'react';
import { Search, Shield, AlertTriangle, CheckCircle, ChevronRight, Filter, Download, RefreshCw } from 'lucide-react';

const VulnerabilityScanner = () => {
  const [scanProgress, setScanProgress] = useState(0);
  const [isScanning, setIsScanning] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState('all');
  
  // Mock vulnerability data
  const allVulnerabilities = [
    {
      id: 1,
      name: 'CVE-2023-42069',
      severity: 'high',
      status: 'open',
      affectedComponent: 'OpenSSL',
      description: 'Buffer overflow vulnerability in OpenSSL library',
      recommendation: 'Update to latest version',
      detectedDate: '2023-10-15'
    },
    {
      id: 2,
      name: 'CVE-2023-98765',
      severity: 'medium',
      status: 'open',
      affectedComponent: 'Apache Server',
      description: 'Directory traversal vulnerability in Apache HTTP Server',
      recommendation: 'Apply security patch',
      detectedDate: '2023-10-10'
    },
    {
      id: 3,
      name: 'CVE-2022-54321',
      severity: 'low',
      status: 'fixed',
      affectedComponent: 'Node.js',
      description: 'Cross-site scripting vulnerability in Node.js package',
      recommendation: 'Update Node.js to version 16.3.0 or higher',
      detectedDate: '2023-09-28'
    },
    {
      id: 4,
      name: 'CVE-2023-11235',
      severity: 'high',
      status: 'open',
      affectedComponent: 'PostgreSQL',
      description: 'SQL injection vulnerability in PostgreSQL connector',
      recommendation: 'Update database driver to latest version',
      detectedDate: '2023-10-14'
    },
  ];

  const filteredVulnerabilities = selectedFilter === 'all' 
    ? allVulnerabilities 
    : allVulnerabilities.filter(v => 
        selectedFilter === 'fixed' ? v.status === 'fixed' : 
        selectedFilter === 'open' ? v.status === 'open' : 
        v.severity === selectedFilter
      );

  const handleStartScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          return 100;
        }
        return prev + 5;
      });
    }, 300);
  };

  const getSeverityBadge = (severity) => {
    const colors = {
      high: 'bg-red-100 text-red-800',
      medium: 'bg-amber-100 text-amber-800',
      low: 'bg-blue-100 text-blue-800',
    };
    
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${colors[severity]}`}>
        {severity.toUpperCase()}
      </span>
    );
  };

  const getStatusBadge = (status) => {
    return status === 'fixed' ? (
      <span className="flex items-center text-green-600 text-xs">
        <CheckCircle className="h-3 w-3 mr-1" />
        Fixed
      </span>
    ) : (
      <span className="flex items-center text-amber-600 text-xs">
        <AlertTriangle className="h-3 w-3 mr-1" />
        Open
      </span>
    );
  };

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
      <div className="bg-gradient-to-r from-indigo-50 to-purple-50 px-4 py-3 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Search className="w-6 h-6 text-indigo-600 mr-2" />
            <h2 className="text-xl font-semibold text-gray-800">Vulnerability Scanner</h2>
          </div>
          <div className="flex items-center space-x-2">
            <span className="text-xs text-gray-600">Last scan: Today, 10:45 AM</span>
            <button 
              onClick={handleStartScan}
              disabled={isScanning}
              className={`px-4 py-2 rounded-md text-sm font-medium ${
                isScanning ? 'bg-gray-300 cursor-not-allowed text-gray-600' : 'bg-indigo-600 hover:bg-indigo-700 text-white'
              }`}
            >
              {isScanning ? 
                <div className="flex items-center">
                  <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                  Scanning...
                </div> : 
                'Start Scan'
              }
            </button>
          </div>
        </div>
      </div>
      
      {isScanning && (
        <div className="p-4 pb-0">
          <div className="flex justify-between mb-1 text-sm text-gray-600">
            <span>Scanning system for vulnerabilities...</span>
            <span>{scanProgress}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-indigo-600 h-2 rounded-full transition-all duration-300" 
              style={{ width: `${scanProgress}%` }}
            ></div>
          </div>
        </div>
      )}
      
      <div className="p-4">
        <div className="mb-4 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <Filter className="h-4 w-4 text-gray-500" />
            <select 
              className="text-sm border-gray-300 rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              value={selectedFilter}
              onChange={(e) => setSelectedFilter(e.target.value)}
            >
              <option value="all">All Vulnerabilities</option>
              <option value="high">High Severity</option>
              <option value="medium">Medium Severity</option>
              <option value="low">Low Severity</option>
              <option value="open">Open</option>
              <option value="fixed">Fixed</option>
            </select>
          </div>
          <button className="flex items-center text-sm text-gray-600 hover:text-gray-800">
            <Download className="h-4 w-4 mr-1" />
            Export Report
          </button>
        </div>
        
        <div className="bg-white rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vulnerability</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Severity</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Component</th>
                <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Detected</th>
                <th scope="col" className="px-3 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredVulnerabilities.map((vuln) => (
                <tr key={vuln.id} className="hover:bg-gray-50">
                  <td className="px-3 py-3 whitespace-nowrap">
                    <div className="flex flex-col">
                      <span className="text-sm font-medium text-gray-900">{vuln.name}</span>
                      <span className="text-xs text-gray-500">{vuln.description}</span>
                    </div>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    {getSeverityBadge(vuln.severity)}
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    {getStatusBadge(vuln.status)}
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <span className="text-sm text-gray-600">{vuln.affectedComponent}</span>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <span className="text-sm text-gray-600">{vuln.detectedDate}</span>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap text-right">
                    <button className="text-indigo-600 hover:text-indigo-900 text-sm font-medium flex items-center ml-auto">
                      Details
                      <ChevronRight className="h-4 w-4 ml-1" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        <div className="mt-4 flex justify-between items-center">
          <div className="flex items-center space-x-4 text-sm text-gray-600">
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-red-500 rounded-full mr-1"></span>
              High: {allVulnerabilities.filter(v => v.severity === 'high').length}
            </span>
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-amber-500 rounded-full mr-1"></span>
              Medium: {allVulnerabilities.filter(v => v.severity === 'medium').length}
            </span>
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-blue-500 rounded-full mr-1"></span>
              Low: {allVulnerabilities.filter(v => v.severity === 'low').length}
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600">
              {allVulnerabilities.filter(v => v.status === 'open').length} issues require attention
            </span>
            <button className="text-indigo-600 hover:text-indigo-900 text-sm font-medium flex items-center">
              View all
              <ChevronRight className="h-4 w-4 ml-1" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityScanner;